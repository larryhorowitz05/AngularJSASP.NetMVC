@model MML.Web.LoanCenter.ViewModels.NewLoanApplicationViewModel
@using MML.Contracts
@using Telerik.Web.Mvc.UI
@using MML.Common
@using MML.Common.Helpers
@using MML.Web.LoanCenter.Helpers.Utilities
<div class="todolist">
    <div id="todolisthead" class="todolisthead">
        <div class="left0 w180">
            <div class="fleft">
                <span id="currentWorkQueueType" class="namelink">Pending Disclosures</span></div>
            <div class="smallarrow">
            </div>
        </div>
        <div class="nooftasks">
            <span id="nooftasks2">@Model.TotalItems.ToString()</span> <span class="font15">Items</span>
        </div>
        <div class="right1">
            <div class="left1">
                <span class="normalfont">Show: </span><span id="officerTaskHeadderSpan" class="g12">@MML.Common.Helpers.EnumHelper.GetStringValue( ( ( MML.Web.LoanCenter.Helpers.Utilities.NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).BoundDate )</span>
            </div>
            <div class="right0">
                <div class="filter">
                    <ul id="nav">
                        <li><a href="#">&nbsp;</a>
                            <ul>
                                <li></li>
                                <li id="ftoday" class="lower">@Ajax.ActionLink( "Today", "Execute", "Command", new { Command = "NewLoanApplicationGridDateFilter,DateFilter=1" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('Today')" }, new { id = "aftoday" } )</li>
                                <li id="ftomorrow" class="lower">@Ajax.ActionLink( "Yesterday", "Execute", "Command", new { Command = "NewLoanApplicationGridDateFilter,DateFilter=2" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('Tomorrow')" }, new { id = "aftomorrow" } )</li>
                                <li id="fthisweek" class="lower">@Ajax.ActionLink( "Last Week", "Execute", "Command", new { Command = "NewLoanApplicationGridDateFilter,DateFilter=3" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('This Week')" }, new { id = "afthisweek" } )</li>
                                <li id="fnextweek" class="lower">@Ajax.ActionLink( "Last Month", "Execute", "Command", new { Command = "NewLoanApplicationGridDateFilter,DateFilter=4" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('Next Week')" }, new { id = "afnextweek" } )</li>
                                <li id="fthismonth" class="lower">@Ajax.ActionLink( "All Open", "Execute", "Command", new { Command = "NewLoanApplicationGridDateFilter,DateFilter=5" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('This Month')" }, new { id = "afthismonth" } )</li>
                                <li></li>
                            </ul>
                        </li>
                    </ul>
                </div>
                <a id="minimizetoday">
                    <div id="minmax" class="min">
                    </div>
                </a>
            </div>
        </div>
    </div>
    <div id="listandpage">
        <div class="newloanapplicationcontent">
            <table class="newloanapplicationtable">
                <tr class="newloanapplicationsubjects" id="trGridHeader">
                    <td>
                    </td>
                    <td class="t0">
                    </td>
                    <td style="display: none">
                    </td>
                    <td class="t1">@Ajax.ActionLink( "Concierge", "Execute", "Command", new { Command = "NewLoanApplicationGridSorting,Column=1" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('ConciergeFullName')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('ConciergeFullName')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('ConciergeFullName')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('ConciergeFullName')" } )
                    </td>
                    <td  class="t2">@Ajax.ActionLink( "Purpose", "Execute", "Command", new { Command = "NewLoanApplicationGridSorting,Column=2" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('BorrowerFullName')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('BorrowerFullName')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('BorrowerFullName')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('BorrowerFullName')" } )
                         <div class="pipelineLoanPurposeArrow">
                            <div class="pipelineLoanPurposeFilter">
                                <ul id="pipelineLoanPurposeFilter">
                                    <li><a href="#">&nbsp;</a>
                                        <ul>
                                            <li></li>
                                            <li class="@(( ( NewLoanApplicationListState )Session[ SessionHelper.NewLoanApplicationListState ] ).LoanPurposeFilter == null || ( ( NewLoanApplicationListState )Session[ SessionHelper.NewLoanApplicationListState ] ).LoanPurposeFilter == "" ? "lowers" : "lower")">
                                                @Ajax.ActionLink( "Show All", "Execute", "Command", new { Command = "NewLoanApplicationGridLoanPurposeFilter,LoanPurposeFilter=0" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess()" } )
                                            </li>
                                            @foreach ( MML.Contracts.LoanTransactionType loanTransactionType in Model.LoanPurposeList )
                                            {
                                                <li class="@(( ( NewLoanApplicationListState )Session[ SessionHelper.NewLoanApplicationListState ] ).LoanPurposeFilter != null && ( ( NewLoanApplicationListState )Session[ SessionHelper.NewLoanApplicationListState ] ).LoanPurposeFilter == loanTransactionType.GetStringValue() ? "lowers" : "lower")">
                                                    @Ajax.ActionLink( loanTransactionType.GetStringValue(), "Execute", "Command", new { Command = "NewLoanApplicationGridLoanPurposeFilter,LoanPurposeFilter=" + loanTransactionType.GetStringValue() }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess()" } )
                                                </li>
                                            }
                                            <li></li>
                                        </ul>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    
                    </td>
                    <td class="t3">@Ajax.ActionLink( "Borrower", "Execute", "Command", new { Command = "NewLoanApplicationGridSorting,Column=2" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('BorrowerFullName')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('BorrowerFullName')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('BorrowerFullName')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('BorrowerFullName')" } )
                        <div class="pipelineLoanPurposeArrow">
                            <div class="pipelineLoanPurposeFilter">
                                <ul id="pipelineBorrowerStatusFilter">
                                    <li><a href="#">&nbsp;</a>
                                        <ul>
                                            <li></li>
                                            <li class="@(String.IsNullOrEmpty( ( ( NewLoanApplicationListState )Session[ SessionHelper.NewLoanApplicationListState ] ).BorrowerStatusFilter ) ? "lowers" : "lower")">
                                                @Ajax.ActionLink( "Show All", "Execute", "Command", new { Command = "NewLoanApplicationGridBorrowerStatusFilter,BorroweStatusFilter=0" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess()" } )
                                            </li>
                                            @foreach ( BorrowerStatusType borrowerStatusType in Model.BorrowerStatusList )
                                            {
                                                <li class="@(( ( NewLoanApplicationListState )Session[ SessionHelper.NewLoanApplicationListState ] ).BorrowerStatusFilter != null && ( ( NewLoanApplicationListState )Session[ SessionHelper.NewLoanApplicationListState ] ).BorrowerStatusFilter == borrowerStatusType.GetStringValue() ? "lowers" : "lower")">
                                                    @Ajax.ActionLink( borrowerStatusType.GetStringValue(), "Execute", "Command", new { Command = "NewLoanApplicationGridBorrowerStatusFilter,BorroweStatusFilter=" + borrowerStatusType.GetStringValue() }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess()" } )
                                                </li>
                                            }
                                            <li></li>
                                        </ul>
                                    </li>
                                </ul>
                            </div>
                        </div>                    
                    </td>
                    <td class="t4">
                        @Ajax.ActionLink( "Application Date", "Execute", "Command", new { Command = "NewLoanApplicationGridSorting,Column=3" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('ApplicationDate')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('ApplicationDate')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('ApplicationDate')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('ApplicationDate')" } )
                    </td>
                    <td class="t5">@Ajax.ActionLink( "Loan Amount", "Execute", "Command", new { Command = "NewLoanApplicationGridSorting,Column=4" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('MortgageAmount')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('MortgageAmount')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('MortgageAmount')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('MortgageAmount')" } )
                    </td>
                    <td class="t6">@Ajax.ActionLink( "Program", "Execute", "Command", new { Command = "NewLoanApplicationGridSorting,Column=5" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('ProgramName')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('ProgramName')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('ProgramName')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('ProgramName')" } )
                    </td>
@*                    <td class="t5">@Ajax.ActionLink( "Rate", "Execute", "Command", new { Command = "NewLoanApplicationGridSorting,Column=5" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('Rate')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('Rate')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('Rate')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('Rate')" } )
                    </td>*@
                    <td class="t7">@Ajax.ActionLink( "Lock Period", "Execute", "Command", new { Command = "NewLoanApplicationGridSorting,Column=6" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('LockDays')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('LockDays')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('LockDays')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('LockDays')" } )
                    </td>
                    <td class="t8">@Ajax.ActionLink( "Lock Expire Date", "Execute", "Command", new { Command = "NewLoanApplicationGridSorting,Column=7" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('LockExpireDate')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('LockExpireDate')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('LockExpireDate')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('LockExpireDate')" } )
                    </td>
                </tr>
                @if ( Model.NewLoanApplicationViewItems != null )
                {
                    for ( int i = 0; i < Model.NewLoanApplicationViewItems.Count; i++ )
                    {
                        if ( Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ] != null )
                        {
                            <tr class="@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ClassCollection"  id="task_@{@String.Format( "{0}P", i )}" onclick=" SelectedTask('@String.Format( "{0}P", i )', '@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ClassCollection', false, 'NewLoanApplication') ">
                                <td>
                                    <div class="biggreen" id="arrowdiv_@{@String.Format( "{0}P", i )}">
                                    </div>
                                    @if ( Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems.Count > 1 )
                                    {
                                        <div class="childIndicator" id="childIndicator_@{@String.Format( "{0}P", i )}" onclick="$(this).unbind('click'); SelectedTask('@String.Format( "{0}P", i )',
                                        '@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ClassCollection', false, 'Pipeline')">
                                
                                        </div>  
                                    }
                                </td>
                                <td>
                                    <div class="@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ExceptionClassCollection">
                                    </div>
                                </td>
                                <td style="display: none" class="loanid">@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LoanId</td>
                                <td style="display: none" class="encryptedloanid">@Server.UrlEncode( EncryptionHelper.EncryptRijndael( Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LoanId.ToString(), EncriptionKeys.Default ) )</td>
                                <td>
                                    <span class="@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LicenseExpiredClass" title="@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LicenseExpiredMessage">
                                        @Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ConciergeFullName
                                    </span>
                                </td>
                         <td>
                             <span rel="ProspectLoanPurposeToolTip,LoanId=@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LoanId.ToString()" class="PopupTrigger2 cursorhand">
			                    @(MML.Common.Helpers.EnumHelper.GetStringValue( ( ( LoanTransactionType )Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LoanType ) ))
                             </span>
                        </td>
                         <td>
                            @Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].BorrowerFullName
                        </td>
                                <td>@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ApplicationDate.ToString( "MM/dd/yyyy" )
                                    @Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ApplicationDate.ToString( "hh:mm tt" )
                                </td>
                                <td>
                                    <div class="numbersright">@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].MortgageAmount.ToString().ToMoney()</div>
                                </td>
                                <td>
                                    <span rel="ProgramNameToolTip,LoanId=@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LoanId.ToString()" class="PopupTrigger3 cursorhand" title="@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ProgramName">@(Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ProgramName.Length
                                    > 48 ? String.Format( "{0}...", Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ProgramName.Substring( 0, 47 ) )
                                    : Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].ProgramName)</span>
                                </td>
                                @*<td>
                                    <div class="numbersright">@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].Rate.ToString( "n3" )
                                        %</div>
                                </td>*@
                                <td class="textcenter">
                                    @Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LockPeriod
                                </td>
                                <td>
                                    @if ( Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LockExpiration != DateTime.MinValue )
                                    {
                                        <span class="lockExpireDate">@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LockExpiration.ToString( "MM/dd/yyyy" )</span>
                                        <span class="lockExpireTime">@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ 0 ].LockExpiration.ToString( "hh:mm tt" )</span>
                                    }
                                </td>
                               
                            </tr>
                                    //Render childs loans
                                    for ( int j = 1; j < Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems.Count; j++ )
                                    {
                                <tr class="@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ j ].ClassCollection childloan"  id="task_@{@String.Format( "{0}P{1}", i, j )}" onclick=" SelectedTask('@String.Format( "{0}P", i )', '@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ j ].ClassCollection', true, 'NewLoanApplication') " style="display:none">
                                    <td></td>
                                    <td>
                                        <div class="@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ j ].ExceptionClassCollection">
                                        </div>
                                    </td>
                                    <td style="display: none" class="loanid">@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ j ].LoanId
                                    </td>
                                    <td></td>
                                    <td></td>
                                    <td>@Model.NewLoanApplicationViewItems[ i ].NewLoanApplicationViewItems[ j ].BorrowerFullName</td>
                                    <td></td>
                                    <td></td>
                                    <td class="textcenter"></td>
                                    <td></td>
                                    <td>
                                        
                                    </td>
                                </tr>
                                    }
                        }
                    }
                }
            </table>
        </div>
        <div class="todolistfooter">
            <div id="numberOfRecordsDiv" class="normalfont left142" style="width: 170px;">
                @if ( Model.TotalItems != 0 )
                {     
                    @(( ( NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage * 10 - 9) <span>-</span> @(( ( MML.Web.LoanCenter.Helpers.Utilities.NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage * 10 - ( 10 - @Model.NewLoanApplicationViewItems.Count )) <span>of</span> @Model.TotalItems.ToString() <span>records</span>
                }
                else if ( Model.TotalItems == 0 )
                {
                    <span>0 records</span>
                }
            </div>
            @if ( Model.PageCount > 1 )
            { 
                <div id="pagingDiv" class="normalfont left20">
                    @if ( Model.TotalItems != 0 )
                    {
                        if ( ( ( NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage != 1 )
                        {               
                        <a href="javascript:void(0)" onclick="NewLoanApplicationGrid.NewLoanApplicationDataHelper('command=NewLoanApplicationGridPaging,Page=@(( ( NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage - 1)')">
                            <div class="leftarrow">
                            </div>
                        </a>
                        }
                        else
                        {
                        <div class="leftarrow">
                        </div>
                        }
                        <div class="left1010">
                            @if ( Model.CurrentPage > 10 )
                            {
                                @Ajax.ActionLink( "...", "Execute", "Command", new
                           {
                               Command = String.Format( "NewLoanApplicationGridPaging,Page={0}",
                                 ( Model.PageCount >= ( ( NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage - 10 ) ?
                                 ( ( NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage - 10 :
                                 Model.PageCount )
                           },
                                                               new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('Page, plusTen')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('Page, plusTen')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('Page, plusTen')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('Page, plusTen')" }, new { @class = "page" } )
                            }
                            @for ( int j = Model.StartPage; j <= Model.EndPage; j++ )
                            {
                                if ( j != ( ( NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage )
                                { 
                                @Ajax.ActionLink( String.Format( "{0} ", j ), "Execute", "Command", new { Command = String.Format( "NewLoanApplicationGridPaging,Page={0}", j ) },
                                                                                       new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = String.Format( "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('Page{0}')", j ), OnComplete = String.Format( "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('Page{0}')", j ), OnBegin = String.Format( "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('Page{0}')", j ), OnSuccess = String.Format( "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('Page{0}')", j ) }, new { @class = "page" } )
                                }
                                else
                                { 
                                @Ajax.ActionLink( String.Format( "{0} ", j ), "Execute", "Command", new { Command = String.Format( "NewLoanApplicationGridPaging,Page={0}", j ) }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = String.Format( "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('Page{0}')", j ), OnComplete = String.Format( "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('Page{0}')", j ), OnBegin = String.Format( "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('Page{0}')", j ), OnSuccess = String.Format( "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('Page{0}')", j ) }, new { @class = "pageselected" } )
                                }
                            }
                            @if ( Model.LastPageDots == false )
                            {
                                @Ajax.ActionLink( "...", "Execute", "Command", new
                           {
                               Command = String.Format( "NewLoanApplicationGridPaging,Page={0}",
                               ( Model.PageCount >= ( ( NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage + 10 ) ?
                               ( ( NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage + 10 :
                               Model.PageCount )
                           },
                                                               new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "NewLoanApplicationGrid.NewLoanApplicationDataOnFailure('Page, plusTen')", OnComplete = "NewLoanApplicationGrid.NewLoanApplicationeDataOnComplete('Page, plusTen')", OnBegin = "NewLoanApplicationGrid.NewLoanApplicationDataOnBegin('Page, plusTen')", OnSuccess = "NewLoanApplicationGrid.NewLoanApplicationDataOnSuccess('Page, plusTen')" }, new { @class = "page" } )
                            }
                        </div>
                            if ( ( ( NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage != Model.PageCount )
                            {              
                        <a href="javascript:void(0)" onclick="NewLoanApplicationGrid.NewLoanApplicationDataHelper('command=NewLoanApplicationGridPaging,Page=@(( ( NewLoanApplicationListState )HttpContext.Current.Session[ SessionHelper.NewLoanApplicationListState ] ).CurrentPage + 1)')">
                            <div class="rightarrow">
                            </div>
                        </a>
                            }
                            else
                            { 
                        <div class="rightarrow">
                        </div>
                            }
                    }
                </div>
            }
        </div>
    </div>
</div>
<script type="text/javascript">

    $(document).ready(function () {
        $('.PopupTrigger3').live('click', function () {

            var previousCommand = $(this).attr('rel');
            var upperBubble = false;

            // position of the current element
            var pos = $(this).offset();
            var width = $(this).width();

            // position of the currently available space page is taking
            var boundaries = $(".page").offset();

            // height of the page
            var pageHeight = $(".page").height();

            //approximate height of the bubble
            var bubbleHeight = 325;

            // check for overflow - if true, set upper bubble flag
            if (pos.top + bubbleHeight > boundaries.top + pageHeight) {
                var upperBubble = true;
                console.log("Break");
            }
            else {
                console.log("OK");
            }

            $(this).parent().find("PopupContainerForClick-ArrowSelected").removeClass("PopupContainerForClick-ArrowSelected");
            $(this).addClass("PopupContainerForClick-ArrowSelected");

            if (previousCommand != "") {

                if (upperBubble) {

                    // set bubble arrow so it points down
                    $('#PopupContainerForClick').removeClass("PopupContainerForClick-ArrowUp");
                    $('#PopupContainerForClick').find(".triangle").addClass("PopupContainerForClick-ArrowEvent");

                    $('#PopupContainerForClick').addClass("PopupContainerForClick-ArrowDown");

                    // position the container so it fits the upper bubble
                    $('#PopupContainerForClick').css({
                        left: (pos.left + width - 550) + 'px',
                        top: pos.top - bubbleHeight + 18 + 'px'
                    });

                    //
                }
                else {

                    // set bubble arrow so it points up
                    $('#PopupContainerForClick').removeClass("PopupContainerForClick-ArrowDown");
                    $('#PopupContainerForClick').find(".triangle").addClass("PopupContainerForClick-ArrowEvent");

                    $('#PopupContainerForClick').addClass("PopupContainerForClick-ArrowUp");

                    // position the container so it fits the lower bubble
                    $('#PopupContainerForClick').css({
                        left: (pos.left + width - 550) + 'px',
                        top: pos.top + 8 + 'px'
                    });
                }

                //fill the bubble with data
                $.ajax({
                    type: 'GET',
                    url: '/Command/Execute',
                    cache: false,
                    data: 'command=' + previousCommand.toString(),
                    success: function (data) {

                        $('#PopupContainerForClick').html(data);
                        $('#PopupContainerForClick').fadeIn();
                        $('#PopupContainerForClick').find(".triangle").addClass("PopupContainerForClick-ArrowEvent");
                    }
                });
            }
        });


    });



</script>

<style>
.PopupContainerForClick-ArrowUp .commandnametooltip
{
    clear: both !important;
    width: 524px !important;
}

.PopupContainerForClick-ArrowDown .commandnametooltip
{   
    clear: both !important;
    width: 524px !important;
}

.PopupContainerForClick-ArrowUp .triangle
{
    background: url('../Content/ProgramArrowUp.png') repeat-x 0px 0px !important;
    background-position: -2px 14px !important;
    float:right !important;
    margin-right: 70px !important; 
}

.PopupContainerForClick-ArrowDown .triangle
{
    background: url('../Content/ProgramArrowDown.png') repeat-x 0px 0px !important;
    background-position: -2px 14px !important;
    float:right !important;
    margin-right: 70px !important; 
    top: 291px;
}
</style>

