@model MML.Web.LoanCenter.ViewModels.OrderExceptionViewModel
@using MML.Contracts
@using Telerik.Web.Mvc.UI
@using MML.Common
@using MML.Common.Helpers
@using MML.Web.LoanCenter.Helpers.Utilities

<div class="todolist">
    
        <div id="todolisthead" class="todolisthead">
        <div class="left0 w180">
            <div class="fleft">
                <span id="currentWorkQueueType" class="namelink">Order Exception</span></div>
            <div class="smallarrow">
            </div>
        </div>
        <div class="nooftasks">
            <span id="nooftasks2">@Model.TotalItems.ToString()</span> <span class="font15">Order Exceptions</span>
        </div>
        <div class="right1">
            <div class="left1">
                <span class="normalfont">Show: </span><span id="officerTaskHeadderSpan" class="g12">@MML.Common.Helpers.EnumHelper.GetStringValue( ( ( MML.Web.LoanCenter.Helpers.Utilities.OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).BoundDate )</span>
            </div>
            <div class="right0">
                <div class="filter">
                    <ul id="nav">
                        <li><a href="#">&nbsp;</a>
                            <ul>
                                <li></li>
                                <li id="ftoday" class="lower">@Ajax.ActionLink( "Today", "Execute", "Command", new { Command = "OrderExceptionGridFilter,DateFilter=1" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('Today')" }, new { id = "aftoday" } )</li>
                                <li id="ftomorrow" class="lower">@Ajax.ActionLink( "Yesterday", "Execute", "Command", new { Command = "OrderExceptionGridFilter,DateFilter=2" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('Tomorrow')" }, new { id = "aftomorrow" } )</li>
                                <li id="fthisweek" class="lower">@Ajax.ActionLink( "Last Week", "Execute", "Command", new { Command = "OrderExceptionGridFilter,DateFilter=3" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('This Week')" }, new { id = "afthisweek" } )</li>
                                <li id="fnextweek" class="lower">@Ajax.ActionLink( "Last Month", "Execute", "Command", new { Command = "OrderExceptionGridFilter,DateFilter=4" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('Next Week')" }, new { id = "afnextweek" } )</li>
                                <li id="fthismonth" class="lower">@Ajax.ActionLink( "All Open", "Execute", "Command", new { Command = "OrderExceptionGridFilter,DateFilter=5" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('This Month')" }, new { id = "afthismonth" } )</li>
                                <li></li>
                            </ul>
                        </li>
                    </ul>
                </div>
                <a id="minimizetoday">
                    <div id="minmax" class="min">
                    </div>
                </a>
            </div>
        </div>
    </div>

    <div id="listandpage">
        <div class="queuecontent">
            <table class="queuetable">
                <tr class="queuesubjects" id="trGridHeader">
                    <td>
                    </td>
                    <td class="t0">
                    </td>
                    <td style="display: none">
                    </td>
                    <td class="t">@Ajax.ActionLink( "Exception Type", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=1" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('ExceptionType')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('ExceptionType')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('ExceptionType')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('ExceptionType')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Loan #", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=2" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('LoanNumber')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('LoanNumber')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('LoanNumber')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('LoanNumber')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Borrower", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=3" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('Borrower')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('Borrower')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('Borrower')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('Borrower')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Loan Amt", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=4" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('LoanAmount')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('LoanAmount')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('LoanAmount')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('LoanAmount')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Purch Amt", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=5" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('PurchaseAmount')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('PurchaseAmount')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('PurchaseAmount')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('PurchaseAmount')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Est Value", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=6" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('EstimatedValue')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('EstimatedValue')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('EstimatedValue')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('EstimatedValue')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Actual Value", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=7" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('ActualValue')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('ActualValue')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('ActualValue')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('ActualValue')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Value Supported", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=8" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('ValueSupported')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('ValueSupported')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('ValueSupported')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('ValueSupported')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Appraisal Condition", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=9" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('AppraisalCondition')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('AppraisalCondition')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('AppraisalCondition')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('AppraisalCondition')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Loan Officer", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=10" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('LoanOfficer')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('LoanOfficer')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('LoanOfficer')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('LoanOfficer')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Order Status", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=11" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('OrderStatus')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('OrderStatus')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('OrderStatus')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('OrderStatus')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Status Date", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=12" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('StatusDate')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('StatusDate')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('StatusDate')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('StatusDate')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Age", "Execute", "Command", new { Command = "OrderExceptionGridSorting,Column=13" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('Age')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('Age')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('Age')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('Age')" } )
                    </td>
                </tr>
                @if ( Model.Exceptions != null )
                {
                    for ( int i = 0; i < Model.Exceptions.Count; i++ )
                    {
                    <tr class="@Model.Exceptions[ i ].ClassCollection first last"  id="task_@{@String.Format( "{0}P", i )}" onclick="SelectedTask('@String.Format( "{0}P", i )','@Model.Exceptions[ i ].ClassCollection  first last', false, 'Exceptions')"> <!-- THIS NEEDS TO ADD ICON FOR ERRORS -->
                        <td>
                            <div class="biggreen" id="arrowdiv @i">
                            </div>
                        </td>
                        <td>
                            <div class="@Model.Exceptions[ i ].ExceptionClassCollection exceptionIcon">
                            </div>
                        </td>
                        <td style="display: none" class="loanid">@Model.Exceptions[ i ].LoanId</td>
                        <td style="display: none" class="encryptedloanid">@Server.UrlEncode( EncryptionHelper.EncryptRijndael( Model.Exceptions[ i ].LoanId.ToString(), EncriptionKeys.Default ) )</td>
                        <td style="width: 110px;">
                            @Model.Exceptions[ i ].ExceptionType
                        </td>
                        <td>
                            @Model.Exceptions[ i ].LoanNumber
                        </td>
                        <td>
                            @Model.Exceptions[ i ].Borrower
                        </td>
                        <td>
                            <div class="numbersrightloanamount">@Model.Exceptions[ i ].LoanAmount.ToString().ToMoney()</div>
                        </td>
                        <td>
                            @if ( Model.Exceptions[ i ].PurchaseAmount != null && Model.Exceptions[ i ].PurchaseAmount.Equals( 0 ) )
                            {
                                <div></div>
                            }
                            else 
                            {
                                <div class="numbersrightloanamount">@Model.Exceptions[ i ].PurchaseAmount.ToString().ToMoney()</div>
                            }
                        </td>
                        <td>
                            @if ( Model.Exceptions[ i ].EstimatedValue != null && Model.Exceptions[ i ].EstimatedValue.Equals( 0 ) )
                            {
                                <div></div>
                            }
                            else
                            {
                                <div class="numbersrightloanamount">@Model.Exceptions[ i ].EstimatedValue.ToString().ToMoney()</div>
                            }
                        </td>
                        <td>
                            @if ( Model.Exceptions[ i ].ActualValue != null && Model.Exceptions[ i ].ActualValue.Equals( 0 ) )
                            {
                                <div></div>
                            }
                            else
                            {
                                <div class="numbersrightloanamount">@Model.Exceptions[ i ].ActualValue.ToString().ToMoney()</div>
                            }
                        </td>
                        <td style="text-align: center">
                            @if ( Model.Exceptions[ i ].ValueSupported )
                            {
                                <img src="@CDNHelper.ImagesStaticContentUrl/Content/images/okhandgreen.png" />
                            }
                            else 
                            {
                                <img src="@CDNHelper.ImagesStaticContentUrl/Content/images/notokhandred.png" />
                            }
                        </td>
                        <td>
                            @if ( Model.Exceptions[ i ].AppraisalCondition.Equals( "AsIs" ) || Model.Exceptions[ i ].AppraisalCondition.Equals( String.Empty ) )
                            {
                                <img src="@CDNHelper.ImagesStaticContentUrl/Content/images/okhandgreen.png" />
                            }
                            else
                            {
                                <img src="@CDNHelper.ImagesStaticContentUrl/Content/images/notokhandred.png" />
                            }
                            @Model.Exceptions[ i ].AppraisalCondition
                        </td>
                        <td>
                            @Model.Exceptions[ i ].LoanOfficer
                        </td>
                        <td>
                            @(Model.Exceptions[ i ].OrderStatus != null ? Model.Exceptions[ i ].OrderStatus.GetStringValue() : String.Empty)
                        </td>
                        <td>
                            @Model.Exceptions[ i ].StatusDate.ToString( "MM/dd/yyyy" )
                        </td>
                        <td>
                            @Model.Exceptions[ i ].Age
                        </td>
                    </tr>		        
                    }
                }
            </table>
        </div>
        <div class="gridlistfooter">
            <div id="numberOfRecordsDiv" class="normalfont left142" style="width: 170px;">
                @if ( Model.TotalItems != 0 )
                {     
                    @(( ( OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage * 10 - 9) <span>-</span> @(( ( MML.Web.LoanCenter.Helpers.Utilities.OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage * 10 - ( 10 - @Model.Exceptions.Count )) <span>of</span> @Model.TotalItems.ToString() <span>records</span>
                }
                else if ( Model.TotalItems == 0 )
                {
                    <span>0 records</span>
                }
            </div>
            @if ( Model.PageCount > 1 )
            { 
                <div id="pagingDiv" class="normalfont left20">
                    @if ( Model.TotalItems != 0 )
                    {
                        if ( ( ( OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage != 1 )
                        {               
                        <a href="javascript:void(0)" onclick="OrderExceptionGrid.DataHelper('command=OrderExceptionGridPaging,Page=@(( ( OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage - 1)')">
                            <div class="leftarrow">
                            </div>
                        </a>
                        }
                        else
                        {
                        <div class="leftarrow">
                        </div>
                        }
                        <div class="left1010">
                            @if ( Model.CurrentPage > 10 )
                            {
                                @Ajax.ActionLink( "...", "Execute", "Command", new
                           {
                               Command = String.Format( "OrderExceptionGridPaging,Page={0}",
                                   ( Model.PageCount >= ( ( OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage - 10 ) ?
                                   ( ( OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage - 10 :
                                   Model.PageCount )
                           },
                                                                       new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('Page, plusTen')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('Page, plusTen')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('Page, plusTen')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('Page, plusTen')" }, new { @class = "page" } )
                            }
                            @for ( int j = Model.StartPage; j <= Model.EndPage; j++ )
                            {
                                if ( j != ( ( OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage )
                                { 
                                    @Ajax.ActionLink( String.Format( "{0} ", j ), "Execute", "Command", new { Command = String.Format( "OrderExceptionGridPaging,Page={0}", j ) },
                                                      new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = String.Format( "OrderExceptionGrid.OrderExceptionDataOnFailure('Page{0}')", j ), OnComplete = String.Format( "OrderExceptionGrid.OrderExceptionDataOnComplete('Page{0}')", j ), OnBegin = String.Format( "OrderExceptionGrid.OrderExceptionDataOnBegin('Page{0}')", j ), OnSuccess = String.Format( "OrderExceptionGrid.OrderExceptionDataOnSuccess('Page{0}')", j ) }, new { @class = "page" } )
                                }
                                else
                                { 
                                    @Ajax.ActionLink( String.Format( "{0} ", j ), "Execute", "Command", new { Command = String.Format( "OrderExceptionGridPaging,Page={0}", j ) }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = String.Format( "OrderExceptionGrid.OrderExceptionDataOnFailure('Page{0}')", j ), OnComplete = String.Format( "OrderExceptionGrid.OrderExceptionDataOnComplete('Page{0}')", j ), OnBegin = String.Format( "OrderExceptionGrid.OrderExceptionDataOnBegin('Page{0}')", j ), OnSuccess = String.Format( "OrderExceptionGrid.OrderExceptionDataOnSuccess('Page{0}')", j ) }, new { @class = "pageselected" } )
                                }
                            }
                            @if ( Model.LastPageDots == false )
                            {
                                @Ajax.ActionLink( "...", "Execute", "Command", new
                           {
                               Command = String.Format( "OrderExceptionGridPaging,Page={0}",
                               ( Model.PageCount >= ( ( OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage + 10 ) ?
                               ( ( OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage + 10 : Model.PageCount )
                           },
                                                                    new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderExceptionGrid.OrderExceptionDataOnFailure('Page, plusTen')", OnComplete = "OrderExceptionGrid.OrderExceptionDataOnComplete('Page, plusTen')", OnBegin = "OrderExceptionGrid.OrderExceptionDataOnBegin('Page, plusTen')", OnSuccess = "OrderExceptionGrid.OrderExceptionDataOnSuccess('Page, plusTen')" }, new { @class = "page" } )
                            }
                        </div>
                            if ( ( ( OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage != Model.PageCount )
                            {              
                                <a href="javascript:void(0)" onclick="OrderExceptionGrid.DataHelper('command=OrderExceptionGridPaging,Page=@(( ( OrderExceptionListState )HttpContext.Current.Session[ SessionHelper.OrderExceptionListState ] ).CurrentPage + 1)')">
                                    <div class="rightarrow">
                                    </div>
                                </a>
                            }
                            else
                            { 
                        <div class="rightarrow">
                        </div>
                            }
                    }
                </div>
            }
        </div>
    </div>

</div>