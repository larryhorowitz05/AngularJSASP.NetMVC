@model MML.Web.LoanCenter.ViewModels.OrderProcessedViewModel
@using MML.Contracts
@using Telerik.Web.Mvc.UI
@using MML.Common
@using MML.Common.Helpers
@using MML.Web.LoanCenter.Helpers.Utilities
<div class="todolist">    
    <div id="todolisthead" class="todolisthead">
        <div class="left0 w180">
            <div class="fleft">
                <span id="currentWorkQueueType" class="namelink">Order Processed</span></div>
            <div class="smallarrow">
            </div>
        </div>
        <div class="nooftasks">
            <span id="nooftasks2">@Model.TotalItems.ToString()</span> <span class="font15">Order Processed</span>
        </div>
        <div class="right1">
            <div class="left1">
                <span class="normalfont">Show: </span><span id="officerTaskHeadderSpan" class="g12">@MML.Common.Helpers.EnumHelper.GetStringValue( ( ( MML.Web.LoanCenter.Helpers.Utilities.OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).BoundDate )</span>
            </div>
            <div class="right0">
                <div class="filter">
                    <ul id="nav">
                        <li><a href="#">&nbsp;</a>
                            <ul>
                                <li></li>
                                <li id="ftoday" class="lower">@Ajax.ActionLink( "Today", "Execute", "Command", new { Command = "OrderProcessedGridDateFilter,DateFilter=1" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('Today')" }, new { id = "aftoday" } )</li>
                                <li id="ftomorrow" class="lower">@Ajax.ActionLink( "Yesterday", "Execute", "Command", new { Command = "OrderProcessedGridDateFilter,DateFilter=2" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('Tomorrow')" }, new { id = "aftomorrow" } )</li>
                                <li id="fthisweek" class="lower">@Ajax.ActionLink( "Last Week", "Execute", "Command", new { Command = "OrderProcessedGridDateFilter,DateFilter=3" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('This Week')" }, new { id = "afthisweek" } )</li>
                                <li id="fnextweek" class="lower">@Ajax.ActionLink( "Last Month", "Execute", "Command", new { Command = "OrderProcessedGridDateFilter,DateFilter=4" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('Next Week')" }, new { id = "afnextweek" } )</li>
                                <li id="fthismonth" class="lower">@Ajax.ActionLink( "All Open", "Execute", "Command", new { Command = "OrderProcessedGridDateFilter,DateFilter=5" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('This Month')" }, new { id = "afthismonth" } )</li>
                                <li></li>
                            </ul>
                        </li>
                    </ul>
                </div>
                <a id="minimizetoday">
                    <div id="minmax" class="min">
                    </div>
                </a>
            </div>
        </div>
    </div>

    <div id="listandpage">
        <div class="queuecontent">
            <table class="queuetable">
                <tr class="queuesubjects" id="trGridHeader">
                    <td>
                    </td>
                    <td class="t0">
                    </td>
                    <td style="display: none">
                    </td>
                    <td class="t">@Ajax.ActionLink( "OrderID", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=1" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('OrderID')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('OrderID')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('OrderID')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('OrderID')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Loan #", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=2" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('LoanNumber')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('LoanNumber')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('LoanNumber')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('LoanNumber')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Borrower", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=3" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('Borrower')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('Borrower')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('Borrower')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('Borrower')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Rush", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=4" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('Rush')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('Rush')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('Rush')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('Rush')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Loan Officer", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=5" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('LoanOfficer')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('LoanOfficer')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('LoanOfficer')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('LoanOfficer')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Requested Date", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=6" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('RequestedDate')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('RequestedDate')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('RequestedDate')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('RequestedDate')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Ordered Date", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=7" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('OrderedDate')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('OrderedDate')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('OrderedDate')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('OrderedDate')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Actual Inspection", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=8" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('ActualInspection')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('ActualInspection')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('ActualInspection')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('ActualInspection')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Exp Delivery", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=9" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('ExpectedDelivery')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('ExpectedDelivery')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('ExpectedDelivery')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('ExpectedDelivery')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Uploaded", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=10" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('Uploaded')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('Uploaded')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('Uploaded')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('Uploaded')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Order Status", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=11" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('OrderStatus')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('OrderStatus')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('OrderStatus')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('OrderStatus')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Status Date", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=12" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('StatusDate')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('StatusDate')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('StatusDate')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('StatusDate')" } )
                    </td>
                    <td class="t">@Ajax.ActionLink( "Age", "Execute", "Command", new { Command = "OrderProcessedGridSorting,Column=13" }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('Age')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('Age')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('Age')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('Age')" } )
                    </td>
                </tr>
                @if ( Model.ProcessedOrders != null )
                {
                    for ( int i = 0; i < Model.ProcessedOrders.Count; i++ )
                    {
                    <tr class="@Model.ProcessedOrders[ i ].ClassCollection first last"  id="task_@{@String.Format( "{0}P", i )}" onclick="SelectedTask('@String.Format( "{0}P", i )','@Model.ProcessedOrders[ i ].ClassCollection first last', false, 'OrderProcessed')">
                        <td>
                            <div class="biggreen" id="arrowdiv @i">
                            </div>
                        </td>
                        <td>
                            <div class="@Model.ProcessedOrders[ i ].ExceptionClassCollection exceptionIcon">
                            </div>
                        </td>
                        <td style="display: none" class="loanid">@Model.ProcessedOrders[ i ].LoanId</td>
                        <td style="display: none" class="encryptedloanid">@Server.UrlEncode( EncryptionHelper.EncryptRijndael( Model.ProcessedOrders[ i ].LoanId.ToString(), EncriptionKeys.Default ) )</td>
                        <td>
                            @Model.ProcessedOrders[ i ].OrderId
                        </td>
                        <td>
                            @Model.ProcessedOrders[ i ].LoanNumber
                        </td>
                        <td>
                            @Model.ProcessedOrders[ i ].Borrower
                        </td>
                        <td>
                             @if ( Model.ProcessedOrders[ i ].Rush )
                             {
                                <img src="@CDNHelper.ImagesStaticContentUrl/Content/images/okhandgreen.png" />
                             }
                        </td>
                        <td>
                            @Model.ProcessedOrders[ i ].LoanOfficer
                        </td>
                        <td>
                            @Model.ProcessedOrders[ i ].RequestedDate.ToString( "MM/dd/yyyy" )
                        </td>
                        <td>
                             @if ( !Model.ProcessedOrders[ i ].OrderedDate.Equals( DateTime.MinValue ) )
                             {
                                 @Model.ProcessedOrders[ i ].OrderedDate.ToString( "MM/dd/yyyy" )
                             }
                        </td>
                        <td>
                            @if ( Model.ProcessedOrders[ i ].ActualInspection.HasValue )
                            {
                                @Model.ProcessedOrders[ i ].ActualInspection.Value.ToString( "MM/dd/yyyy" );
                            }
                        </td>
                        <td>
                            @if ( Model.ProcessedOrders[ i ].ExpectedDelivery.HasValue )
                            {
                                @Model.ProcessedOrders[ i ].ExpectedDelivery.Value.ToString( "MM/dd/yyyy" );
                            }  
                        </td>
                        <td>
                            @if ( Model.ProcessedOrders[ i ].UploadedDate.HasValue )
                            {
                                @Model.ProcessedOrders[ i ].UploadedDate.Value.ToString( "MM/dd/yyyy" );
                            }  
                        </td>
                        <td>
                            @(Model.ProcessedOrders[ i ].OrderStatus != null ? Model.ProcessedOrders[ i ].OrderStatus.GetStringValue() : String.Empty)
                        </td>
                        <td>
                            @if (!Model.ProcessedOrders[i].StatusDate.Equals(DateTime.MinValue))
                            {
                                @Model.ProcessedOrders[i].StatusDate.ToString("MM/dd/yyyy")
                            }
                        </td>
                        <td>
                            @Model.ProcessedOrders[ i ].Age
                        </td>
                    </tr>		        
                    }
                }
            </table>
        </div>
        <div class="gridlistfooter">
            <div id="numberOfRecordsDiv" class="normalfont left142" style="width: 170px;">
                @if ( Model.TotalItems != 0 )
                {     
                    @(( ( OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage * 10 - 9) <span>-</span> @(( ( MML.Web.LoanCenter.Helpers.Utilities.OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage * 10 - ( 10 - @Model.ProcessedOrders.Count )) <span>of</span> @Model.TotalItems.ToString() <span>records</span>
                }
                else if ( Model.TotalItems == 0 )
                {
                    <span>0 records</span>
                }
            </div>
            @if ( Model.PageCount > 1 )
            { 
                <div id="pagingDiv" class="normalfont left20">
                    @if ( Model.TotalItems != 0 )
                    {
                        if ( ( ( OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage != 1 )
                        {               
                        <a href="javascript:void(0)" onclick="OrderProcessedGrid.DataHelper('command=ProcessedOrdersGridPaging,Page=@(( ( OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage - 1)')">
                            <div class="leftarrow">
                            </div>
                        </a>
                        }
                        else
                        {
                        <div class="leftarrow">
                        </div>
                        }
                        <div class="left1010">
                            @if ( Model.CurrentPage > 10 )
                            {
                                @Ajax.ActionLink( "...", "Execute", "Command", new
                           {
                               Command = String.Format( "OrderProcessedGridPaging,Page={0}",
                                   ( Model.PageCount >= ( ( OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage - 10 ) ?
                                   ( ( OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage - 10 :
                                   Model.PageCount )
                           },
                                                                                                new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('Page, plusTen')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('Page, plusTen')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('Page, plusTen')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('Page, plusTen')" }, new { @class = "page" } )
                            }
                            @for ( int j = Model.StartPage; j <= Model.EndPage; j++ )
                            {
                                if ( j != ( ( OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage )
                                { 
                                    @Ajax.ActionLink( String.Format( "{0} ", j ), "Execute", "Command", new { Command = String.Format( "OrderProcessedGridPaging,Page={0}", j ) },
                                                                          new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = String.Format( "OrderProcessedGrid.OrderProcessedDataOnFailure('Page{0}')", j ), OnComplete = String.Format( "OrderProcessedGrid.OrderProcessedDataOnComplete('Page{0}')", j ), OnBegin = String.Format( "OrderProcessedGrid.OrderProcessedDataOnBegin('Page{0}')", j ), OnSuccess = String.Format( "OrderProcessedGrid.OrderProcessedDataOnSuccess('Page{0}')", j ) }, new { @class = "page" } )
                                }
                                else
                                { 
                                    @Ajax.ActionLink( String.Format( "{0} ", j ), "Execute", "Command", new { Command = String.Format( "OrderProcessedGridPaging,Page={0}", j ) }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = String.Format( "OrderProcessedGrid.OrderProcessedDataOnFailure('Page{0}')", j ), OnComplete = String.Format( "OrderProcessedGrid.OrderProcessedDataOnComplete('Page{0}')", j ), OnBegin = String.Format( "OrderProcessedGrid.OrderProcessedDataOnBegin('Page{0}')", j ), OnSuccess = String.Format( "OrderProcessedGrid.OrderProcessedDataOnSuccess('Page{0}')", j ) }, new { @class = "pageselected" } )
                                }
                            }
                            @if ( Model.LastPageDots == false )
                            {
                                @Ajax.ActionLink( "...", "Execute", "Command", new
                           {
                               Command = String.Format( "OrderProcessedGridPaging,Page={0}",
                               ( Model.PageCount >= ( ( OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage + 10 ) ?
                               ( ( OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage + 10 : Model.PageCount )
                           },
                                                                                        new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "mainsection", OnFailure = "OrderProcessedGrid.OrderProcessedDataOnFailure('Page, plusTen')", OnComplete = "OrderProcessedGrid.OrderProcessedDataOnComplete('Page, plusTen')", OnBegin = "OrderProcessedGrid.OrderProcessedDataOnBegin('Page, plusTen')", OnSuccess = "OrderProcessedGrid.OrderProcessedDataOnSuccess('Page, plusTen')" }, new { @class = "page" } )
                            }
                        </div>
                            if ( ( ( OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage != Model.PageCount )
                            {              
                        <a href="javascript:void(0)" onclick="OrderProcessedGrid.DataHelper('command=OrderProcessedGridPaging,Page=@(( ( OrderProcessedListState )HttpContext.Current.Session[ SessionHelper.OrderProcessedListState ] ).CurrentPage + 1)')">
                            <div class="rightarrow">
                            </div>
                        </a>
                            }
                            else
                            { 
                        <div class="rightarrow">
                        </div>
                            }
                    }
                </div>
            }
        </div>
    </div>

</div>
